# -*- coding: utf-8 -*-
"""Examen.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10TorIG7Y9ZWZzsbfYw_Nkpg1WXWCJuPy

# Compiladores 2
## Tercer parcial - Ciencia de datos
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, r2_score

"""Variables para el archivo"""

path = '/content/drive/MyDrive/Colab/DataScience/Examen'
filename = '/examen.csv'

"""Setear parametros"""

df = pd.read_csv(f'{path}{filename}', sep=';')

"""Transformar data a array"""

var_x = 'Anio'
var_y = 'Republica'

x = np.asarray(df[var_x]).reshape(-1, 1)
y = df[var_y]

"""Configurar regresión lineal"""

regr = LinearRegression()
regr.fit(x, y)
y_pred = regr.predict(x)

"""Graficos"""

plt.scatter(x, y, color='green')
plt.plot(x, y_pred, color='blue')

"""Predicciones"""

print(regr.predict([[2030]]))

"""Impresión de valores"""

print(x)
print(y_pred)
print(regr.coef_)
print(regr.intercept_)

"""Configurar regresión polinomial"""

pf = PolynomialFeatures(degree = 2)
x_trans = pf.fit_transform(x)

regr = LinearRegression()
regr.fit(x_trans, y)

y_pred = regr.predict(x_trans)
rmse = np.sqrt(mean_squared_error(y, y_pred))
r2 = r2_score(y, y_pred)

print('RMSE: ', rmse)
print('R^2: ', r2)

"""Predicción"""

x_new_min = 2025
x_new_max = 2025
x_new = np.linspace(x_new_min, x_new_max, 50)
x_new = x_new[:, np.newaxis]

x_trans = pf.fit_transform(x_new)

print(regr.predict(x_trans))

plt.scatter(x, y, color='green')
plt.plot(x, y_pred, color='blue')
plt.show()

"""GausianoNB

"""

from sklearn.naive_bayes import GaussianNB
X = np.array([[6,3,1,3,7,4,3,6],[7,4,0,4,8,5,4,7],[8,5,1,5,6,3,5,7],[7,4,2,4,8,5,4,7],[8,5,1,5,7,4,5,8],[7,4,0,3,4,2,0,0],[8,5,0,3,5,1,0,0],[7,4,2,5,4,0,0,0]])
Y = np.array([1, 1, 1, 2, 2, 2])
clf = GaussianNB()
# Adaptación de datos
clf.fit(X, Y)
print("==Predict result by predict==")
# print(clf.predict([[-0.8, -1]]))
print("==Predict result by predict_proba==")
# print(clf.predict_proba([[-0.8, -1]]))
print("==Predict result by predict_log_proba==")
# print(clf.predict_log_proba([[-0.8, -1]]))